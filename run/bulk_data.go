package run

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"time"

	"cloud.google.com/go/bigquery"
	"cloud.google.com/go/civil"

	"google.golang.org/api/iterator"
	"google.golang.org/appengine"
	"google.golang.org/appengine/log"

	"github.com/AlphaHat/gcp-alpha-hat/cache"
)

var bogusData = `
{"EntityData":[{"Data":[{"Data":[{"Time":"2016-09-30T00:00:00Z","Data":64732.5366737382},{"Time":"2016-10-01T00:00:00Z","Data":81905.83966181587},{"Time":"2016-10-02T00:00:00Z","Data":80247.6247272333},{"Time":"2016-10-03T00:00:00Z","Data":66059.71276251302},{"Time":"2016-10-04T00:00:00Z","Data":68372.43834001156},{"Time":"2016-10-05T00:00:00Z","Data":66843.84529401634},{"Time":"2016-10-06T00:00:00Z","Data":65783.54937320789},{"Time":"2016-10-07T00:00:00Z","Data":69743.12626616044},{"Time":"2016-10-08T00:00:00Z","Data":81203.13817487446},{"Time":"2016-10-09T00:00:00Z","Data":77492.50441863626},{"Time":"2016-10-10T00:00:00Z","Data":68296.47089923779},{"Time":"2016-10-11T00:00:00Z","Data":62992.83867272781},{"Time":"2016-10-12T00:00:00Z","Data":61926.14105915684},{"Time":"2016-10-13T00:00:00Z","Data":63807.1748556472},{"Time":"2016-10-14T00:00:00Z","Data":67599.34103500815},{"Time":"2016-10-15T00:00:00Z","Data":78089.83922398521},{"Time":"2016-10-16T00:00:00Z","Data":76925.1120357809},{"Time":"2016-10-17T00:00:00Z","Data":59420.46704976158},{"Time":"2016-10-18T00:00:00Z","Data":43339.96967114544},{"Time":"2016-10-19T00:00:00Z","Data":67493.37947887238},{"Time":"2016-10-20T00:00:00Z","Data":69983.22664137052},{"Time":"2016-10-21T00:00:00Z","Data":74103.70259212345},{"Time":"2016-10-22T00:00:00Z","Data":86397.72293003606},{"Time":"2016-10-23T00:00:00Z","Data":84300.6391287179},{"Time":"2016-10-24T00:00:00Z","Data":71193.47909311327},{"Time":"2016-10-25T00:00:00Z","Data":71636.59394270238},{"Time":"2016-10-26T00:00:00Z","Data":73860.56636411342},{"Time":"2016-10-27T00:00:00Z","Data":75234.65217586563},{"Time":"2016-10-28T00:00:00Z","Data":78097.91747510024},{"Time":"2016-10-29T00:00:00Z","Data":92823.91584448895},{"Time":"2016-10-30T00:00:00Z","Data":94335.02226887048},{"Time":"2016-10-31T00:00:00Z","Data":75671.55579314014},{"Time":"2016-11-01T00:00:00Z","Data":70077.8597209547},{"Time":"2016-11-02T00:00:00Z","Data":72331.28567416508},{"Time":"2016-11-03T00:00:00Z","Data":70555.38214715564},{"Time":"2016-11-04T00:00:00Z","Data":73256.99677856191},{"Time":"2016-11-05T00:00:00Z","Data":89109.11154345007},{"Time":"2016-11-06T00:00:00Z","Data":86627.44600754953},{"Time":"2016-11-07T00:00:00Z","Data":72403.4642353664},{"Time":"2016-11-08T00:00:00Z","Data":70123.76321873389},{"Time":"2016-11-09T00:00:00Z","Data":70008.19022993563},{"Time":"2016-11-10T00:00:00Z","Data":73596.36935271719},{"Time":"2016-11-11T00:00:00Z","Data":80408.78201304922},{"Time":"2016-11-12T00:00:00Z","Data":89647.0463832262},{"Time":"2016-11-13T00:00:00Z","Data":90617.52011106529},{"Time":"2016-11-14T00:00:00Z","Data":72865.62179565076},{"Time":"2016-11-15T00:00:00Z","Data":73679.86270054078},{"Time":"2016-11-16T00:00:00Z","Data":75546.0188913115},{"Time":"2016-11-17T00:00:00Z","Data":75709.28722868362},{"Time":"2016-11-18T00:00:00Z","Data":77851.30320703014},{"Time":"2016-11-19T00:00:00Z","Data":102428.85011143061},{"Time":"2016-11-20T00:00:00Z","Data":98873.59053751062},{"Time":"2016-11-21T00:00:00Z","Data":79144.08812294573},{"Time":"2016-11-22T00:00:00Z","Data":79756.66189813851},{"Time":"2016-11-23T00:00:00Z","Data":84262.15801941567},{"Time":"2016-11-24T00:00:00Z","Data":92867.29527613915},{"Time":"2016-11-25T00:00:00Z","Data":148456.71301371377},{"Time":"2016-11-26T00:00:00Z","Data":110449.59636644273},{"Time":"2016-11-27T00:00:00Z","Data":102542.7485829787},{"Time":"2016-11-28T00:00:00Z","Data":94412.03060777497},{"Time":"2016-11-29T00:00:00Z","Data":78623.22027721578},{"Time":"2016-11-30T00:00:00Z","Data":81955.37136343913},{"Time":"2016-12-01T00:00:00Z","Data":81806.14940610205},{"Time":"2016-12-02T00:00:00Z","Data":88714.74536800623},{"Time":"2016-12-03T00:00:00Z","Data":109174.8328759109},{"Time":"2016-12-04T00:00:00Z","Data":88122.78996137003},{"Time":"2016-12-05T00:00:00Z","Data":89834.01158776772},{"Time":"2016-12-06T00:00:00Z","Data":88268.23162328944},{"Time":"2016-12-07T00:00:00Z","Data":86252.84065140702},{"Time":"2016-12-08T00:00:00Z","Data":86332.20524241864},{"Time":"2016-12-09T00:00:00Z","Data":93696.71843366123},{"Time":"2016-12-10T00:00:00Z","Data":119464.38544632276},{"Time":"2016-12-11T00:00:00Z","Data":114061.89062445503},{"Time":"2016-12-12T00:00:00Z","Data":99701.24590248588},{"Time":"2016-12-13T00:00:00Z","Data":101232.51464585219},{"Time":"2016-12-14T00:00:00Z","Data":104959.68690993488},{"Time":"2016-12-15T00:00:00Z","Data":104490.66550458327},{"Time":"2016-12-16T00:00:00Z","Data":109394.46992380472},{"Time":"2016-12-17T00:00:00Z","Data":130792.54689996877},{"Time":"2016-12-18T00:00:00Z","Data":131965.27667121607},{"Time":"2016-12-19T00:00:00Z","Data":120203.41557955567},{"Time":"2016-12-20T00:00:00Z","Data":123208.8303586646},{"Time":"2016-12-21T00:00:00Z","Data":125342.40912228229},{"Time":"2016-12-22T00:00:00Z","Data":127761.4639435},{"Time":"2016-12-23T00:00:00Z","Data":136117.29859039877},{"Time":"2016-12-24T00:00:00Z","Data":115150.72470731984},{"Time":"2016-12-25T00:00:00Z","Data":2418.6714063385507},{"Time":"2016-12-26T00:00:00Z","Data":123863.261172737},{"Time":"2016-12-27T00:00:00Z","Data":100654.34582020633},{"Time":"2016-12-28T00:00:00Z","Data":95256.19680263672},{"Time":"2016-12-29T00:00:00Z","Data":92686.95513452137},{"Time":"2016-12-30T00:00:00Z","Data":91501.62141880846},{"Time":"2016-12-31T00:00:00Z","Data":95640.50007791242},{"Time":"2017-01-01T00:00:00Z","Data":63523.061617203806},{"Time":"2017-01-02T00:00:00Z","Data":100940.45322519315},{"Time":"2017-01-03T00:00:00Z","Data":79292.60062146332},{"Time":"2017-01-04T00:00:00Z","Data":79976.28483165351},{"Time":"2017-01-05T00:00:00Z","Data":74867.31346760434},{"Time":"2017-01-06T00:00:00Z","Data":76271.1304006648},{"Time":"2017-01-07T00:00:00Z","Data":94336.2661764736},{"Time":"2017-01-08T00:00:00Z","Data":95359.26862663066},{"Time":"2017-01-09T00:00:00Z","Data":75044.40735632677},{"Time":"2017-01-10T00:00:00Z","Data":53859.01268091638},{"Time":"2017-01-11T00:00:00Z","Data":73837.90078956178},{"Time":"2017-01-12T00:00:00Z","Data":71981.23915200768},{"Time":"2017-01-13T00:00:00Z","Data":75627.46785088448},{"Time":"2017-01-14T00:00:00Z","Data":93165.61587417655},{"Time":"2017-01-15T00:00:00Z","Data":89636.55116011055},{"Time":"2017-01-16T00:00:00Z","Data":83842.15744930072},{"Time":"2017-01-17T00:00:00Z","Data":69946.49631629618},{"Time":"2017-01-18T00:00:00Z","Data":71523.63904126687},{"Time":"2017-01-19T00:00:00Z","Data":71521.3375735532},{"Time":"2017-01-20T00:00:00Z","Data":73445.30576114985},{"Time":"2017-01-21T00:00:00Z","Data":86882.81870265862},{"Time":"2017-01-22T00:00:00Z","Data":63196.42205743958},{"Time":"2017-01-23T00:00:00Z","Data":68792.78677575555},{"Time":"2017-01-24T00:00:00Z","Data":70887.06420783416},{"Time":"2017-01-25T00:00:00Z","Data":70754.38505648694},{"Time":"2017-01-26T00:00:00Z","Data":69366.36864761682},{"Time":"2017-01-27T00:00:00Z","Data":71696.21630845076},{"Time":"2017-01-28T00:00:00Z","Data":88652.40592369324},{"Time":"2017-01-29T00:00:00Z","Data":87363.12055176192},{"Time":"2017-01-30T00:00:00Z","Data":71883.2830544775},{"Time":"2017-01-31T00:00:00Z","Data":68355.8218568321},{"Time":"2017-02-01T00:00:00Z","Data":71755.77696867513},{"Time":"2017-02-02T00:00:00Z","Data":69755.38820833273},{"Time":"2017-02-03T00:00:00Z","Data":73069.42696745734},{"Time":"2017-02-04T00:00:00Z","Data":89443.39771493275},{"Time":"2017-02-05T00:00:00Z","Data":88269.48061947418},{"Time":"2017-02-06T00:00:00Z","Data":71373.94955119511},{"Time":"2017-02-07T00:00:00Z","Data":71203.41907997627},{"Time":"2017-02-08T00:00:00Z","Data":73254.26540010997},{"Time":"2017-02-09T00:00:00Z","Data":74030.54145259672},{"Time":"2017-02-10T00:00:00Z","Data":79178.4278642957},{"Time":"2017-02-11T00:00:00Z","Data":96396.76292909797},{"Time":"2017-02-12T00:00:00Z","Data":95419.21367881485},{"Time":"2017-02-13T00:00:00Z","Data":94815.82846604529},{"Time":"2017-02-14T00:00:00Z","Data":76556.08842610715},{"Time":"2017-02-15T00:00:00Z","Data":72201.4543121011},{"Time":"2017-02-16T00:00:00Z","Data":70638.85981399572},{"Time":"2017-02-17T00:00:00Z","Data":72786.82313636134},{"Time":"2017-02-18T00:00:00Z","Data":88762.65734976297},{"Time":"2017-02-19T00:00:00Z","Data":87187.28893922131},{"Time":"2017-02-20T00:00:00Z","Data":81533.06049154277},{"Time":"2017-02-21T00:00:00Z","Data":69966.8662953006},{"Time":"2017-02-22T00:00:00Z","Data":70179.0039430715},{"Time":"2017-02-23T00:00:00Z","Data":69011.45205966507},{"Time":"2017-02-24T00:00:00Z","Data":71972.08773139113},{"Time":"2017-02-25T00:00:00Z","Data":81112.94848545744},{"Time":"2017-02-26T00:00:00Z","Data":88432.12605216748},{"Time":"2017-02-27T00:00:00Z","Data":69859.40246045694},{"Time":"2017-02-28T00:00:00Z","Data":70010.26265244598},{"Time":"2017-03-01T00:00:00Z","Data":69796.17047560222},{"Time":"2017-03-02T00:00:00Z","Data":71801.13194983908},{"Time":"2017-03-03T00:00:00Z","Data":72615.00721914547},{"Time":"2017-03-04T00:00:00Z","Data":88084.09311952318},{"Time":"2017-03-05T00:00:00Z","Data":86406.07993278466},{"Time":"2017-03-06T00:00:00Z","Data":69698.42689056614},{"Time":"2017-03-07T00:00:00Z","Data":70460.39232847767},{"Time":"2017-03-08T00:00:00Z","Data":70182.82694031466},{"Time":"2017-03-09T00:00:00Z","Data":69723.5876990962},{"Time":"2017-03-10T00:00:00Z","Data":72447.93666416107},{"Time":"2017-03-11T00:00:00Z","Data":87879.9982086011},{"Time":"2017-03-12T00:00:00Z","Data":88811.96926809543},{"Time":"2017-03-13T00:00:00Z","Data":71248.61481326185},{"Time":"2017-03-14T00:00:00Z","Data":72160.06130228391},{"Time":"2017-03-15T00:00:00Z","Data":73930.8338060394},{"Time":"2017-03-16T00:00:00Z","Data":74433.66473432854},{"Time":"2017-03-17T00:00:00Z","Data":71617.80836458849},{"Time":"2017-03-18T00:00:00Z","Data":86256.38648960782},{"Time":"2017-03-19T00:00:00Z","Data":85245.59582825875},{"Time":"2017-03-20T00:00:00Z","Data":69881.33570511811},{"Time":"2017-03-21T00:00:00Z","Data":69961.41742914412},{"Time":"2017-03-22T00:00:00Z","Data":70300.8938125652},{"Time":"2017-03-23T00:00:00Z","Data":68052.48437375523},{"Time":"2017-03-24T00:00:00Z","Data":70228.08302451935},{"Time":"2017-03-25T00:00:00Z","Data":81761.05880633781},{"Time":"2017-03-26T00:00:00Z","Data":83362.57820323194},{"Time":"2017-03-27T00:00:00Z","Data":69889.38842815942},{"Time":"2017-03-28T00:00:00Z","Data":69346.85757516322},{"Time":"2017-03-29T00:00:00Z","Data":69437.12789114294},{"Time":"2017-03-30T00:00:00Z","Data":67757.02931373387},{"Time":"2017-03-31T00:00:00Z","Data":69783.16538534133},{"Time":"2017-04-01T00:00:00Z","Data":79640.22478940233},{"Time":"2017-04-02T00:00:00Z","Data":81382.51201225597},{"Time":"2017-04-03T00:00:00Z","Data":66655.96214882491},{"Time":"2017-04-04T00:00:00Z","Data":67831.08434794075},{"Time":"2017-04-05T00:00:00Z","Data":67365.29296327445},{"Time":"2017-04-06T00:00:00Z","Data":67489.59762675896},{"Time":"2017-04-07T00:00:00Z","Data":69353.6616789965},{"Time":"2017-04-08T00:00:00Z","Data":74769.12919067132},{"Time":"2017-04-09T00:00:00Z","Data":75738.83544644859},{"Time":"2017-04-10T00:00:00Z","Data":68733.98636365804},{"Time":"2017-04-11T00:00:00Z","Data":74105.48798223396},{"Time":"2017-04-12T00:00:00Z","Data":75903.06780097964},{"Time":"2017-04-13T00:00:00Z","Data":75845.59702358575},{"Time":"2017-04-14T00:00:00Z","Data":87036.44548432855},{"Time":"2017-04-15T00:00:00Z","Data":96293.15723181599},{"Time":"2017-04-16T00:00:00Z","Data":3709.589449604282},{"Time":"2017-04-17T00:00:00Z","Data":73987.93142736945},{"Time":"2017-04-18T00:00:00Z","Data":66825.25214181315},{"Time":"2017-04-19T00:00:00Z","Data":68551.2391369966},{"Time":"2017-04-20T00:00:00Z","Data":65751.1444028298},{"Time":"2017-04-21T00:00:00Z","Data":67490.7530960177},{"Time":"2017-04-22T00:00:00Z","Data":75471.0115262502},{"Time":"2017-04-23T00:00:00Z","Data":78115.48201320774},{"Time":"2017-04-24T00:00:00Z","Data":65346.410114065045},{"Time":"2017-04-25T00:00:00Z","Data":64337.92688766182},{"Time":"2017-04-26T00:00:00Z","Data":64699.25479384561},{"Time":"2017-04-27T00:00:00Z","Data":64118.02713762653},{"Time":"2017-04-28T00:00:00Z","Data":65252.01792649897},{"Time":"2017-04-29T00:00:00Z","Data":72797.85004580645},{"Time":"2017-04-30T00:00:00Z","Data":76012.58887201488},{"Time":"2017-05-01T00:00:00Z","Data":63117.08626353995},{"Time":"2017-05-02T00:00:00Z","Data":63819.16920137377},{"Time":"2017-05-03T00:00:00Z","Data":65271.396971243834},{"Time":"2017-05-04T00:00:00Z","Data":64153.17343897449},{"Time":"2017-05-05T00:00:00Z","Data":62732.70804894636},{"Time":"2017-05-06T00:00:00Z","Data":78798.90142144324},{"Time":"2017-05-07T00:00:00Z","Data":74379.01562039493},{"Time":"2017-05-08T00:00:00Z","Data":65631.1988879247},{"Time":"2017-05-09T00:00:00Z","Data":67023.36265336993},{"Time":"2017-05-10T00:00:00Z","Data":68202.20612665293},{"Time":"2017-05-11T00:00:00Z","Data":68074.66178372302},{"Time":"2017-05-12T00:00:00Z","Data":70200.76735736364},{"Time":"2017-05-13T00:00:00Z","Data":78803.88289641662},{"Time":"2017-05-14T00:00:00Z","Data":68654.87066770066},{"Time":"2017-05-15T00:00:00Z","Data":65506.43847334818},{"Time":"2017-05-16T00:00:00Z","Data":66432.4191451189},{"Time":"2017-05-17T00:00:00Z","Data":66676.8995296149},{"Time":"2017-05-18T00:00:00Z","Data":66426.91249143126},{"Time":"2017-05-19T00:00:00Z","Data":67747.55648133313},{"Time":"2017-05-20T00:00:00Z","Data":77075.63616589096},{"Time":"2017-05-21T00:00:00Z","Data":77928.93303582139},{"Time":"2017-05-22T00:00:00Z","Data":69074.5396945881},{"Time":"2017-05-23T00:00:00Z","Data":70058.22601895533},{"Time":"2017-05-24T00:00:00Z","Data":69818.08397359752},{"Time":"2017-05-25T00:00:00Z","Data":68036.82558672574},{"Time":"2017-05-26T00:00:00Z","Data":69347.55433686843},{"Time":"2017-05-27T00:00:00Z","Data":74212.99013642936},{"Time":"2017-05-28T00:00:00Z","Data":77508.68155535149},{"Time":"2017-05-29T00:00:00Z","Data":78538.3573580825},{"Time":"2017-05-30T00:00:00Z","Data":68203.36536403061},{"Time":"2017-05-31T00:00:00Z","Data":69614.02186053134},{"Time":"2017-06-01T00:00:00Z","Data":68145.23197748093},{"Time":"2017-06-02T00:00:00Z","Data":70394.07354690612},{"Time":"2017-06-03T00:00:00Z","Data":77278.29966529693},{"Time":"2017-06-04T00:00:00Z","Data":77978.75308830713},{"Time":"2017-06-05T00:00:00Z","Data":70630.87299261455},{"Time":"2017-06-06T00:00:00Z","Data":71533.85556765646},{"Time":"2017-06-07T00:00:00Z","Data":71095.09766633014},{"Time":"2017-06-08T00:00:00Z","Data":70868.8215677128},{"Time":"2017-06-09T00:00:00Z","Data":73677.40891868519},{"Time":"2017-06-10T00:00:00Z","Data":83722.65502703721},{"Time":"2017-06-11T00:00:00Z","Data":55167.92252675605},{"Time":"2017-06-12T00:00:00Z","Data":72297.14401502987},{"Time":"2017-06-13T00:00:00Z","Data":73144.02128175815},{"Time":"2017-06-14T00:00:00Z","Data":74444.1858989275},{"Time":"2017-06-15T00:00:00Z","Data":74565.6331046256},{"Time":"2017-06-16T00:00:00Z","Data":75909.42286006104},{"Time":"2017-06-17T00:00:00Z","Data":85529.66761912142},{"Time":"2017-06-18T00:00:00Z","Data":56498.48393165409},{"Time":"2017-06-19T00:00:00Z","Data":72110.63236598657},{"Time":"2017-06-20T00:00:00Z","Data":71493.16369970853},{"Time":"2017-06-21T00:00:00Z","Data":71835.58179611899},{"Time":"2017-06-22T00:00:00Z","Data":71887.50384733763},{"Time":"2017-06-23T00:00:00Z","Data":75061.05749765264},{"Time":"2017-06-24T00:00:00Z","Data":78987.32579464372},{"Time":"2017-06-25T00:00:00Z","Data":78364.14128625451},{"Time":"2017-06-26T00:00:00Z","Data":71684.17265375868},{"Time":"2017-06-27T00:00:00Z","Data":72434.69660111822},{"Time":"2017-06-28T00:00:00Z","Data":73637.76309281091},{"Time":"2017-06-29T00:00:00Z","Data":71216.4088037247},{"Time":"2017-06-30T00:00:00Z","Data":73951.03362989267},{"Time":"2017-07-01T00:00:00Z","Data":81112.11415155267},{"Time":"2017-07-02T00:00:00Z","Data":54687.271416796604},{"Time":"2017-07-03T00:00:00Z","Data":81091.35828836876},{"Time":"2017-07-04T00:00:00Z","Data":59097.80316991196},{"Time":"2017-07-05T00:00:00Z","Data":73799.53359555821},{"Time":"2017-07-06T00:00:00Z","Data":76356.17043171995},{"Time":"2017-07-07T00:00:00Z","Data":77531.89001541868},{"Time":"2017-07-08T00:00:00Z","Data":84887.16501573252},{"Time":"2017-07-09T00:00:00Z","Data":83846.6557477463},{"Time":"2017-07-10T00:00:00Z","Data":77089.0290447446},{"Time":"2017-07-11T00:00:00Z","Data":76515.44281312112},{"Time":"2017-07-12T00:00:00Z","Data":76656.80045882742},{"Time":"2017-07-13T00:00:00Z","Data":76186.38915094949},{"Time":"2017-07-14T00:00:00Z","Data":77864.78780917231},{"Time":"2017-07-15T00:00:00Z","Data":86037.7527652204},{"Time":"2017-07-16T00:00:00Z","Data":91141.56860657976},{"Time":"2017-07-17T00:00:00Z","Data":76844.03851442345},{"Time":"2017-07-18T00:00:00Z","Data":76983.0027690041},{"Time":"2017-07-19T00:00:00Z","Data":77109.0072602988},{"Time":"2017-07-20T00:00:00Z","Data":76398.6677128204},{"Time":"2017-07-21T00:00:00Z","Data":76867.3012696567},{"Time":"2017-07-22T00:00:00Z","Data":87544.50840494706},{"Time":"2017-07-23T00:00:00Z","Data":58931.589444180085},{"Time":"2017-07-24T00:00:00Z","Data":75200.50178668043},{"Time":"2017-07-25T00:00:00Z","Data":77832.64287505759},{"Time":"2017-07-26T00:00:00Z","Data":74541.4437846079},{"Time":"2017-07-27T00:00:00Z","Data":73937.56648123925},{"Time":"2017-07-28T00:00:00Z","Data":78357.12226876443},{"Time":"2017-07-29T00:00:00Z","Data":87774.35345589247},{"Time":"2017-07-30T00:00:00Z","Data":88394.47030401805},{"Time":"2017-07-31T00:00:00Z","Data":80332.63004023237},{"Time":"2017-08-01T00:00:00Z","Data":79279.71112810314},{"Time":"2017-08-02T00:00:00Z","Data":80556.47324071475},{"Time":"2017-08-03T00:00:00Z","Data":78113.13956836305},{"Time":"2017-08-04T00:00:00Z","Data":82619.83184351081},{"Time":"2017-08-05T00:00:00Z","Data":94937.89645764796},{"Time":"2017-08-06T00:00:00Z","Data":96171.1779663836},{"Time":"2017-08-07T00:00:00Z","Data":80290.92822968164},{"Time":"2017-08-08T00:00:00Z","Data":82344.58113409049},{"Time":"2017-08-09T00:00:00Z","Data":82405.27781140298},{"Time":"2017-08-10T00:00:00Z","Data":78932.70412614713},{"Time":"2017-08-11T00:00:00Z","Data":81208.97507400575},{"Time":"2017-08-12T00:00:00Z","Data":94617.42207875366},{"Time":"2017-08-13T00:00:00Z","Data":98519.30955478322},{"Time":"2017-08-14T00:00:00Z","Data":85576.20793696676},{"Time":"2017-08-15T00:00:00Z","Data":84713.17605865268},{"Time":"2017-08-16T00:00:00Z","Data":83650.95813632957},{"Time":"2017-08-17T00:00:00Z","Data":81952.25147534334},{"Time":"2017-08-18T00:00:00Z","Data":81755.59952407646},{"Time":"2017-08-19T00:00:00Z","Data":92429.98600789047},{"Time":"2017-08-20T00:00:00Z","Data":93237.20638800683},{"Time":"2017-08-21T00:00:00Z","Data":76069.85593864137},{"Time":"2017-08-22T00:00:00Z","Data":79988.36293825947},{"Time":"2017-08-23T00:00:00Z","Data":77394.53785786676},{"Time":"2017-08-24T00:00:00Z","Data":75572.78899260743},{"Time":"2017-08-25T00:00:00Z","Data":77102.08928195576},{"Time":"2017-08-26T00:00:00Z","Data":88759.83678427264},{"Time":"2017-08-27T00:00:00Z","Data":91728.44323058915},{"Time":"2017-08-28T00:00:00Z","Data":76294.29858399507},{"Time":"2017-08-29T00:00:00Z","Data":76048.40436380623},{"Time":"2017-08-30T00:00:00Z","Data":75054.95076922824},{"Time":"2017-08-31T00:00:00Z","Data":70937.62067990044},{"Time":"2017-09-01T00:00:00Z","Data":72746.88941760761},{"Time":"2017-09-02T00:00:00Z","Data":86006.37648136471},{"Time":"2017-09-03T00:00:00Z","Data":86931.67129095292},{"Time":"2017-09-04T00:00:00Z","Data":93710.88047061273},{"Time":"2017-09-05T00:00:00Z","Data":72044.50327718617},{"Time":"2017-09-06T00:00:00Z","Data":71888.92897459472},{"Time":"2017-09-07T00:00:00Z","Data":69429.55187064811},{"Time":"2017-09-08T00:00:00Z","Data":70666.67009286716},{"Time":"2017-09-09T00:00:00Z","Data":82671.6234289973},{"Time":"2017-09-10T00:00:00Z","Data":83411.2524198815},{"Time":"2017-09-11T00:00:00Z","Data":70087.35313292347},{"Time":"2017-09-12T00:00:00Z","Data":70726.89478214268},{"Time":"2017-09-13T00:00:00Z","Data":70975.71673511704},{"Time":"2017-09-14T00:00:00Z","Data":70537.15134958467},{"Time":"2017-09-15T00:00:00Z","Data":72595.73381497423},{"Time":"2017-09-16T00:00:00Z","Data":85339.2942349326},{"Time":"2017-09-17T00:00:00Z","Data":84320.13442653674},{"Time":"2017-09-18T00:00:00Z","Data":69354.84719550902},{"Time":"2017-09-19T00:00:00Z","Data":74918.85625965997},{"Time":"2017-09-20T00:00:00Z","Data":70972.02553614807},{"Time":"2017-09-21T00:00:00Z","Data":71366.41769216841},{"Time":"2017-09-22T00:00:00Z","Data":73530.89509266293},{"Time":"2017-09-23T00:00:00Z","Data":85916.5019852531},{"Time":"2017-09-24T00:00:00Z","Data":85654.81514111142},{"Time":"2017-09-25T00:00:00Z","Data":71471.56497271369},{"Time":"2017-09-26T00:00:00Z","Data":71458.87493477557},{"Time":"2017-09-27T00:00:00Z","Data":72049.81130687235},{"Time":"2017-09-28T00:00:00Z","Data":69956.77987872451},{"Time":"2017-09-29T00:00:00Z","Data":74749.08459255725},{"Time":"2017-09-30T00:00:00Z","Data":86753.66307068519},{"Time":"2017-10-01T00:00:00Z","Data":86871.97072598663},{"Time":"2017-10-02T00:00:00Z","Data":71002.57661535265},{"Time":"2017-10-03T00:00:00Z","Data":71489.98576371315},{"Time":"2017-10-04T00:00:00Z","Data":71966.40881227984},{"Time":"2017-10-05T00:00:00Z","Data":71829.45148405927},{"Time":"2017-10-06T00:00:00Z","Data":75051.31365424847},{"Time":"2017-10-07T00:00:00Z","Data":87227.89938234366},{"Time":"2017-10-08T00:00:00Z","Data":87947.40605187199},{"Time":"2017-10-09T00:00:00Z","Data":77897.21809864833},{"Time":"2017-10-10T00:00:00Z","Data":73066.73847672905},{"Time":"2017-10-11T00:00:00Z","Data":74053.77205848997},{"Time":"2017-10-12T00:00:00Z","Data":73961.62554494287},{"Time":"2017-10-13T00:00:00Z","Data":77928.58362171976},{"Time":"2017-10-14T00:00:00Z","Data":90203.42213594733},{"Time":"2017-10-15T00:00:00Z","Data":89906.09449135367},{"Time":"2017-10-16T00:00:00Z","Data":75157.75375432962},{"Time":"2017-10-17T00:00:00Z","Data":74533.66466516643},{"Time":"2017-10-18T00:00:00Z","Data":74801.60883729249},{"Time":"2017-10-19T00:00:00Z","Data":74881.61354113786},{"Time":"2017-10-20T00:00:00Z","Data":77036.4412452689},{"Time":"2017-10-21T00:00:00Z","Data":89839.9521917069},{"Time":"2017-10-22T00:00:00Z","Data":89215.8418028084},{"Time":"2017-10-23T00:00:00Z","Data":78405.78640943827},{"Time":"2017-10-24T00:00:00Z","Data":79122.1670808041},{"Time":"2017-10-25T00:00:00Z","Data":80130.19939550282},{"Time":"2017-10-26T00:00:00Z","Data":80879.69007360395},{"Time":"2017-10-27T00:00:00Z","Data":81884.34098490461},{"Time":"2017-10-28T00:00:00Z","Data":97906.76808944547},{"Time":"2017-10-29T00:00:00Z","Data":94998.18843098494},{"Time":"2017-10-30T00:00:00Z","Data":89003.53974620454},{"Time":"2017-10-31T00:00:00Z","Data":75973.26871066191},{"Time":"2017-11-01T00:00:00Z","Data":75621.46260902476},{"Time":"2017-11-02T00:00:00Z","Data":74244.7808557638},{"Time":"2017-11-03T00:00:00Z","Data":77472.00932736656},{"Time":"2017-11-04T00:00:00Z","Data":91684.44518036924},{"Time":"2017-11-05T00:00:00Z","Data":97329.95644941216},{"Time":"2017-11-06T00:00:00Z","Data":78144.85550208364},{"Time":"2017-11-07T00:00:00Z","Data":75672.36800169978},{"Time":"2017-11-08T00:00:00Z","Data":75346.21160941201},{"Time":"2017-11-09T00:00:00Z","Data":75263.79382355501},{"Time":"2017-11-10T00:00:00Z","Data":84423.50025097854},{"Time":"2017-11-11T00:00:00Z","Data":96026.39791679091},{"Time":"2017-11-12T00:00:00Z","Data":93959.03026455759},{"Time":"2017-11-13T00:00:00Z","Data":75353.43419082712},{"Time":"2017-11-14T00:00:00Z","Data":74622.88581025068},{"Time":"2017-11-15T00:00:00Z","Data":74937.9568391714},{"Time":"2017-11-16T00:00:00Z","Data":75414.37986056664},{"Time":"2017-11-17T00:00:00Z","Data":78331.2317693055},{"Time":"2017-11-18T00:00:00Z","Data":99708.15342754594},{"Time":"2017-11-19T00:00:00Z","Data":96598.2165982166},{"Time":"2017-11-20T00:00:00Z","Data":79608.25607884431},{"Time":"2017-11-21T00:00:00Z","Data":77539.23980257395},{"Time":"2017-11-22T00:00:00Z","Data":85715.18926902954},{"Time":"2017-11-23T00:00:00Z","Data":105665.85518001734},{"Time":"2017-11-24T00:00:00Z","Data":150177.49551019626},{"Time":"2017-11-25T00:00:00Z","Data":103980.09389459684},{"Time":"2017-11-26T00:00:00Z","Data":98339.35152094609},{"Time":"2017-11-27T00:00:00Z","Data":84808.42538194249},{"Time":"2017-11-28T00:00:00Z","Data":83683.39949416278},{"Time":"2017-11-29T00:00:00Z","Data":82730.66684386045},{"Time":"2017-11-30T00:00:00Z","Data":82518.78543697124},{"Time":"2017-12-01T00:00:00Z","Data":85116.73376185482},{"Time":"2017-12-02T00:00:00Z","Data":102508.08901133205},{"Time":"2017-12-03T00:00:00Z","Data":108214.78283775556},{"Time":"2017-12-04T00:00:00Z","Data":86358.20914581977},{"Time":"2017-12-05T00:00:00Z","Data":87893.97648643084},{"Time":"2017-12-06T00:00:00Z","Data":90175.6945223706},{"Time":"2017-12-07T00:00:00Z","Data":91708.95716992178},{"Time":"2017-12-08T00:00:00Z","Data":95729.85289243655},{"Time":"2017-12-09T00:00:00Z","Data":120550.95083072709},{"Time":"2017-12-10T00:00:00Z","Data":121974.10786974464},{"Time":"2017-12-11T00:00:00Z","Data":97523.42204471651},{"Time":"2017-12-12T00:00:00Z","Data":98543.83279097152},{"Time":"2017-12-13T00:00:00Z","Data":100381.19635713339},{"Time":"2017-12-14T00:00:00Z","Data":102583.47081758123},{"Time":"2017-12-15T00:00:00Z","Data":104748.65808569621},{"Time":"2017-12-16T00:00:00Z","Data":130255.77510636474},{"Time":"2017-12-17T00:00:00Z","Data":131038.05408829536},{"Time":"2017-12-18T00:00:00Z","Data":117226.16064351492},{"Time":"2017-12-19T00:00:00Z","Data":120208.20193171532},{"Time":"2017-12-20T00:00:00Z","Data":123206.3713647477},{"Time":"2017-12-21T00:00:00Z","Data":125380.06869274958},{"Time":"2017-12-22T00:00:00Z","Data":131498.29345483097},{"Time":"2017-12-23T00:00:00Z","Data":144490.64282123797},{"Time":"2017-12-24T00:00:00Z","Data":97698.05747335029},{"Time":"2017-12-25T00:00:00Z","Data":2122.2820473760985},{"Time":"2017-12-26T00:00:00Z","Data":124986.33490722708},{"Time":"2017-12-27T00:00:00Z","Data":103707.6468354713},{"Time":"2017-12-28T00:00:00Z","Data":97003.4205328323},{"Time":"2017-12-29T00:00:00Z","Data":95751.26731827485},{"Time":"2017-12-30T00:00:00Z","Data":101953.4194286578},{"Time":"2017-12-31T00:00:00Z","Data":98536.95007199862},{"Time":"2018-01-01T00:00:00Z","Data":76679.7175694024},{"Time":"2018-01-02T00:00:00Z","Data":88228.61560016427},{"Time":"2018-01-03T00:00:00Z","Data":82907.2390836635},{"Time":"2018-01-04T00:00:00Z","Data":80429.06864420116},{"Time":"2018-01-05T00:00:00Z","Data":82033.60885006734},{"Time":"2018-01-06T00:00:00Z","Data":95609.6578545933},{"Time":"2018-01-07T00:00:00Z","Data":94392.20969993531},{"Time":"2018-01-08T00:00:00Z","Data":76912.78257471535},{"Time":"2018-01-09T00:00:00Z","Data":75372.31789949181},{"Time":"2018-01-10T00:00:00Z","Data":75250.44612558598},{"Time":"2018-01-11T00:00:00Z","Data":72464.67364760154},{"Time":"2018-01-12T00:00:00Z","Data":74668.89644208706},{"Time":"2018-01-13T00:00:00Z","Data":92593.82033253659},{"Time":"2018-01-14T00:00:00Z","Data":90880.65083881957},{"Time":"2018-01-15T00:00:00Z","Data":85955.61780981594},{"Time":"2018-01-16T00:00:00Z","Data":72352.0561018972},{"Time":"2018-01-17T00:00:00Z","Data":74164.44887949132},{"Time":"2018-01-18T00:00:00Z","Data":73692.33385217062},{"Time":"2018-01-19T00:00:00Z","Data":74848.03713718546},{"Time":"2018-01-20T00:00:00Z","Data":90802.07684208265},{"Time":"2018-01-21T00:00:00Z","Data":88725.5747737205},{"Time":"2018-01-22T00:00:00Z","Data":71270.73502550977},{"Time":"2018-01-23T00:00:00Z","Data":71924.30923134097},{"Time":"2018-01-24T00:00:00Z","Data":72663.73119015047},{"Time":"2018-01-25T00:00:00Z","Data":72255.45108936183},{"Time":"2018-01-26T00:00:00Z","Data":74529.84907487013},{"Time":"2018-01-27T00:00:00Z","Data":90661.35590626394},{"Time":"2018-01-28T00:00:00Z","Data":89771.01416216073},{"Time":"2018-01-29T00:00:00Z","Data":73408.42363179351},{"Time":"2018-01-30T00:00:00Z","Data":73404.23812952095},{"Time":"2018-01-31T00:00:00Z","Data":74408.18029691001},{"Time":"2018-02-01T00:00:00Z","Data":71795.95292079418},{"Time":"2018-02-02T00:00:00Z","Data":75134.98512265466},{"Time":"2018-02-03T00:00:00Z","Data":91311.88437560758},{"Time":"2018-02-04T00:00:00Z","Data":62366.6489075626},{"Time":"2018-02-05T00:00:00Z","Data":72035.31596025526},{"Time":"2018-02-06T00:00:00Z","Data":73268.22408811456},{"Time":"2018-02-07T00:00:00Z","Data":74579.37634236978},{"Time":"2018-02-08T00:00:00Z","Data":74496.94351387586},{"Time":"2018-02-09T00:00:00Z","Data":76476.11002893533},{"Time":"2018-02-10T00:00:00Z","Data":95493.53708598492},{"Time":"2018-02-11T00:00:00Z","Data":97019.08159571742},{"Time":"2018-02-12T00:00:00Z","Data":84770.29856374477},{"Time":"2018-02-13T00:00:00Z","Data":97726.69577305361},{"Time":"2018-02-14T00:00:00Z","Data":77516.79505299014},{"Time":"2018-02-15T00:00:00Z","Data":72444.65439419771},{"Time":"2018-02-16T00:00:00Z","Data":75202.67960899584},{"Time":"2018-02-17T00:00:00Z","Data":88875.1765658403},{"Time":"2018-02-18T00:00:00Z","Data":86546.75776450538},{"Time":"2018-02-19T00:00:00Z","Data":80787.00003197238},{"Time":"2018-02-20T00:00:00Z","Data":68896.45382203418},{"Time":"2018-02-21T00:00:00Z","Data":70413.02887844191},{"Time":"2018-02-22T00:00:00Z","Data":70660.95836963759},{"Time":"2018-02-23T00:00:00Z","Data":73661.5980621674},{"Time":"2018-02-24T00:00:00Z","Data":89029.2780188992},{"Time":"2018-02-25T00:00:00Z","Data":87960.48192702122},{"Time":"2018-02-26T00:00:00Z","Data":71340.28535133832},{"Time":"2018-02-27T00:00:00Z","Data":71611.13260083566},{"Time":"2018-02-28T00:00:00Z","Data":70850.55030372961},{"Time":"2018-03-01T00:00:00Z","Data":69627.08873095481},{"Time":"2018-03-02T00:00:00Z","Data":71943.4903460059},{"Time":"2018-03-03T00:00:00Z","Data":88070.30351974611},{"Time":"2018-03-04T00:00:00Z","Data":85784.15376331806},{"Time":"2018-03-05T00:00:00Z","Data":68590.75837409131},{"Time":"2018-03-06T00:00:00Z","Data":69928.9158188827},{"Time":"2018-03-07T00:00:00Z","Data":70949.87795751494},{"Time":"2018-03-08T00:00:00Z","Data":70769.11571229284},{"Time":"2018-03-09T00:00:00Z","Data":74271.081769642},{"Time":"2018-03-10T00:00:00Z","Data":89038.28340030121},{"Time":"2018-03-11T00:00:00Z","Data":88367.44990010119},{"Time":"2018-03-12T00:00:00Z","Data":73585.36792287523},{"Time":"2018-03-13T00:00:00Z","Data":72694.09443909801},{"Time":"2018-03-14T00:00:00Z","Data":73018.81155781617},{"Time":"2018-03-15T00:00:00Z","Data":72604.98088535103},{"Time":"2018-03-16T00:00:00Z","Data":76529.625087917},{"Time":"2018-03-17T00:00:00Z","Data":86784.13636919238},{"Time":"2018-03-18T00:00:00Z","Data":85803.32385696408},{"Time":"2018-03-19T00:00:00Z","Data":72530.12067256383},{"Time":"2018-03-20T00:00:00Z","Data":72802.5959519551},{"Time":"2018-03-21T00:00:00Z","Data":74145.31846923586},{"Time":"2018-03-22T00:00:00Z","Data":74723.356411622},{"Time":"2018-03-23T00:00:00Z","Data":77061.99703019683},{"Time":"2018-03-24T00:00:00Z","Data":91936.20458118874},{"Time":"2018-03-25T00:00:00Z","Data":92077.38665889774},{"Time":"2018-03-26T00:00:00Z","Data":78729.06474983964}],"Meta":{"VendorCode":"Number of Visits","Label":"Number of Visits","Units":"#","Source":"PlaceIQ","Upsample":4,"Downsample":3,"IsTransformed":false},"IsWeight":false}],"Category":{"Data":[{"Time":"2016-09-30T00:00:00Z","Data":1}],"Labels":[{"Id":1,"Label":""}]},"Meta":{"Name":"Target","UniqueId":"Target","IsCustom":true}}],"Title":"Target → Number of Visits All Available → All Available","Error":"","GraphicalPreference":""}

`

var bogusData2 = `{"EntityData":[{"Data":[{"Data":[{"Time":"2016-11-01T00:00:00Z","Data":1},{"Time":"2017-11-01T00:00:00Z","Data":1}],"Meta":{"VendorCode":"weight","Label":"Weights","Units":"Weight","Source":"Third-Party","Upsample":4,"Downsample":1,"IsTransformed":false},"IsWeight":true}],"Category":{"Data":[{"Time":"2016-11-01T00:00:00Z","Data":1}],"Labels":[{"Id":1,"Label":""}]},"Meta":{"Name":"BestBuy","UniqueId":"BestBuy","IsCustom":true}}],"Title":"BestBuy → Quarter Dates All Available","Error":"","GraphicalPreference":""}`

var bogusData3 = `{"EntityData":[{"Data":[{"Data":[{"Time":"2017-11-01T00:00:00Z","Data":0.01877},{"Time":"2017-11-03T00:00:00Z","Data":0.01867},{"Time":"2017-11-09T00:00:00Z","Data":0.01867},{"Time":"2017-11-13T00:00:00Z","Data":0.01867},{"Time":"2017-11-16T00:00:00Z","Data":0.02283},{"Time":"2017-11-17T00:00:00Z","Data":0.02283},{"Time":"2017-11-29T00:00:00Z","Data":0.02283},{"Time":"2018-01-08T00:00:00Z","Data":0.02283},{"Time":"2018-01-19T00:00:00Z","Data":0.02283}],"Meta":{"VendorCode":"Same-Store Sales Street Est.","Label":"Same-Store Sales Street Est.","Units":"%","Source":"Third-Party","Upsample":1,"Downsample":1,"IsTransformed":false},"IsWeight":false}],"Category":{"Data":[{"Time":"2017-11-01T00:00:00Z","Data":1}],"Labels":[{"Id":1,"Label":""}]},"Meta":{"Name":"BestBuy","UniqueId":"BestBuy","IsCustom":true}}],"Title":"BestBuy → SSS Estimate All Available","Error":"","GraphicalPreference":""}
`

var sqlDb *sql.DB

func connect() (*sql.DB, error) {
	var db *sql.DB

	connectionName := os.Getenv("CLOUDSQL_CONNECTION_NAME")
	user := os.Getenv("CLOUDSQL_USER")
	password := os.Getenv("CLOUDSQL_PASSWORD") // NOTE: password may be empty

	var err error
	db, err = sql.Open("mysql", fmt.Sprintf("%s:%s@cloudsql(%s)/location", user, password, connectionName))
	if err != nil {
		return nil, err
	}

	// rows, err := db.Query("SHOW DATABASES")
	// if err != nil {
	// 	return nil, err
	// }
	// defer rows.Close()

	return db, nil
}

func QueryStringArray(ctx context.Context, query string, args ...interface{}) []string {
	var err error
	if sqlDb == nil {
		sqlDb, err = connect()
	}
	if err != nil {
		log.Errorf(ctx, "Unable to connect to database")
	}

	sArr := make([]string, 0)
	rows, err := sqlDb.Query(query, args...)

	if err != nil {
		log.Errorf(ctx, "query error = %s", err)
		return sArr
	}

	var s string

	defer rows.Close()
	for rows.Next() {
		err := rows.Scan(&s)

		if err != nil {
			log.Errorf(ctx, "query error = %s", err)
		} else {
			sArr = append(sArr, s)
		}
	}

	return sArr
}

// query returns a slice of the results of a query.
func bigQuery(ctx context.Context, proj string, queryString string) (*bigquery.RowIterator, error) {
	client, err := bigquery.NewClient(ctx, proj)
	if err != nil {
		return nil, err
	}

	query := client.Query(queryString)
	// Use standard SQL syntax for queries.
	// See: https://cloud.google.com/bigquery/sql-reference/
	query.QueryConfig.UseStandardSQL = true
	query.QueryConfig.UseLegacySQL = false
	query.QueryConfig.DisableQueryCache = false
	return query.Read(ctx)
}

func GenericBigQuery(ctx context.Context, query string, metaMap map[string]SeriesMeta, stringJoiner string, isWeight bool) MultiEntityData {
	iter, err := bigQuery(ctx, "altdatahub", query)

	var m MultiEntityData

	if !logError(ctx, err) {
		return m
	}

	for {
		var row []bigquery.Value
		err := iter.Next(&row)
		if err == iterator.Done {
			return m
		}
		if !logError(ctx, err) {
			return m
		}

		date := row[0].(civil.Date)
		entity := row[1].(string)
		field := row[2].(string)
		subfield := row[3].(string)
		data := row[4].(float64)

		if err != nil {
			log.Errorf(ctx, "query error = %s", err)
		} else {
			// t, _ := time.Parse("2006-01-02", date)
			t := time.Date(date.Year, date.Month, date.Day, 0, 0, 0, 0, time.UTC)

			seriesMeta := metaMap[field]

			if subfield != "" {
				seriesMeta.VendorCode = seriesMeta.VendorCode + stringJoiner + subfield
				seriesMeta.Label = seriesMeta.VendorCode
			}

			m = m.Insert(
				EntityMeta{
					Name:     entity,
					UniqueId: entity,
					IsCustom: true,
				},
				seriesMeta,
				DataPoint{
					Time: t,
					Data: data,
				},
				CategoryLabel{
					Id:    0,
					Label: "",
				},
				isWeight)
		}

	}

	// return m
}

func GenericSQLQuery(ctx context.Context, query string, metaMap map[string]SeriesMeta, stringJoiner string, isWeight bool) MultiEntityData {
	var err error
	if sqlDb == nil {
		sqlDb, err = connect()
	}
	if err != nil {
		log.Errorf(ctx, "Unable to connect to database")
	}

	var m MultiEntityData

	rows, err := sqlDb.Query(query)

	if err != nil {
		log.Errorf(ctx, "query error = %s", err)
		return m
	}

	m.Title = ""
	var date, entity, field, subfield string
	var data float64

	defer rows.Close()
	for rows.Next() {
		err := rows.Scan(&date, &entity, &field, &subfield, &data)

		if err != nil {
			log.Errorf(ctx, "query error = %s", err)
		} else {
			t, _ := time.Parse("2006-01-02", date)

			seriesMeta := metaMap[field]

			if subfield != "" {
				seriesMeta.VendorCode = seriesMeta.VendorCode + stringJoiner + subfield
				seriesMeta.Label = seriesMeta.VendorCode
			}

			m = m.Insert(
				EntityMeta{
					Name:     entity,
					UniqueId: entity,
					IsCustom: true,
				},
				seriesMeta,
				DataPoint{
					Time: t,
					Data: data,
				},
				CategoryLabel{
					Id:    0,
					Label: "",
				},
				isWeight)
		}
	}

	return m
}

func listOfStringsToQuotedCommaList(entities []string) string {
	for i, v := range entities {
		entities[i] = "'" + strings.Replace(v, "'", "\\'", -1) + "'"
	}

	return strings.Join(entities, ", ")
}

func GetSQLData(ctx context.Context, entities []string, queryName string, parameters map[string][]string, startDate time.Time, endDate time.Time) MultiEntityData {
	cache := cache.NewGenericCache(
		time.Hour*24,
		"SQLData",
		func(ctx context.Context, key string) (interface{}, bool) {
			return GetSQLDataLive(ctx, entities, queryName, parameters, startDate, endDate), true
		})

	dmaList := parameters["DMA"]
	source := parameters["Movement Source"]
	normalizationOrder := parameters["Normalization Order"]
	norm := parameters["Normalization"]
	smoothing := parameters["Smoothing"]

	iface, found := cache.Retrieve(ctx, queryName+":"+fmt.Sprintf("%s", smoothing)+":"+fmt.Sprintf("%s", entities)+":"+fmt.Sprintf("%s", dmaList)+":"+fmt.Sprintf("%s", source)+":"+fmt.Sprintf("%s", normalizationOrder)+":"+fmt.Sprintf("%s", norm))

	if found {
		switch m := iface.(type) {
		case MultiEntityData:
			return m
		}
	}

	return MultiEntityData{Error: "Unable to retrieve from SQL Data"}
}

func GetSQLDataLive(ctx context.Context, entities []string, queryName string, parameters map[string][]string, startDate time.Time, endDate time.Time) MultiEntityData {
	timer := time.Now()

	metaMap := map[string]SeriesMeta{
		"Number of Visits": SeriesMeta{
			VendorCode:    "Number of Visits",
			Label:         "Number of Visits",
			Units:         "#",
			Source:        "PlaceIQ",
			Upsample:      ResampleZero,
			Downsample:    ResampleArithmetic,
			IsTransformed: false,
		},
		"% of Traffic": SeriesMeta{
			VendorCode:    "% of Traffic",
			Label:         "% of Traffic",
			Units:         "%",
			Source:        "PlaceIQ",
			Upsample:      ResampleLastValue,
			Downsample:    ResampleLastValue,
			IsTransformed: false,
		},
		"SSS Estimate": SeriesMeta{
			VendorCode:    "Same-Store Sales Street Est.",
			Label:         "Same-Store Sales Street Est.",
			Units:         "%",
			Source:        "Third-Party",
			Upsample:      ResampleLastValue,
			Downsample:    ResampleLastValue,
			IsTransformed: false,
		},
		"WoW Change": SeriesMeta{
			VendorCode:    "WoW Change",
			Label:         "WoW Change",
			Units:         "%",
			Source:        "Narrative",
			Upsample:      ResampleLastValue,
			Downsample:    ResampleLastValue,
			IsTransformed: false,
		},
		"weight": SeriesMeta{
			VendorCode:    "weight",
			Label:         "weight",
			Units:         "weight",
			Source:        "Third-Party",
			Upsample:      ResampleZero,
			Downsample:    ResampleLastValue,
			IsTransformed: false,
		},
	}

	var isBigQuery = false

	var dateRestriction string
	if !startDate.IsZero() {
		dateRestriction = " and local_date >= '" + startDate.String() + "' "
	} else {
		dateRestriction = ""
	}

	var dmaRestriction string
	var dmaList []string
	var movementSource = "both"
	var movementSourceKey = "all"
	var dataTable = "location.brand_no_filter_update"
	var multiplier = "1000000"

	var primaryType string
	var secondaryTypeJoin = "and a.subfield = b.secondary_type"
	var subfield = `''`

	if parameters != nil {
		dmaList = parameters["DMA"]
		if len(dmaList) > 0 {
			dmaRestriction = " and dma in (" + listOfStringsToQuotedCommaList(dmaList) + ")"
			isBigQuery = true
		} else {
			dmaRestriction = ""
		}

		if isBigQuery {
			dataTable = "altdatahub.placeiq_daily.uq_results_no_filter"
		} else {
			dataTable = "location.brand_no_filter_update"
		}

		source := parameters["Movement Source"]
		if len(source) > 0 {
			switch source[0] {
			case "Foreground":
				movementSource = "foreground"
			case "Background":
				movementSource = "background"
			case "Background149":
				movementSource = "background"
				movementSourceKey = "149"
			case "Background231":
				movementSource = "background"
				movementSourceKey = "231"
			case "Background305":
				movementSource = "background"
				movementSourceKey = "305"
			}
		}

		norm := parameters["Normalization"]
		normOrder := parameters["Normalization Order"]
		smoothing := parameters["Smoothing"]

		if len(norm) > 0 && len(normOrder) > 0 && len(smoothing) > 0 {
			switch norm[0] {
			case "raw":
				primaryType = "raw"
			case "placeiq":
				primaryType = "placeiq"
			case "alphahat_basket":
				primaryType = "basket"
			case "alphahat_nobasket":
				primaryType = "nobasket"
			}

			if smoothing[0] == "smoothed" && primaryType != "raw" {
				primaryType = primaryType + "_smoothed"
			}

			switch normOrder[0] {
			case "add_then_normalize":
				subfield = "''"

				if primaryType == "raw" {
					secondaryTypeJoin = "and b.secondary_type = ''"
				} else if movementSource == "background" {
					secondaryTypeJoin = "and b.secondary_type = 'bg'"
				} else if movementSource == "foreground" {
					secondaryTypeJoin = "and b.secondary_type = 'fg'"
				} else if movementSource == "both" {
					secondaryTypeJoin = "and b.secondary_type = 'both'"
				}
			case "normalize_then_add":
				if isBigQuery {
					subfield = "cast(movement_source_key as string)"
				} else {
					subfield = "cast(movement_source_key as char(45))"
				}
				secondaryTypeJoin = "and a.subfield = b.secondary_type"
			}
		}
	}

	var movementSourceQuery string
	if movementSource == "foreground" {
		movementSourceQuery = `where movement_source = 'foreground'`
	} else if movementSource == "background" {
		if movementSourceKey != "all" {
			movementSourceQuery = `where movement_source_key = ` + movementSourceKey
		} else {
			movementSourceQuery = `where movement_source = 'background'`
		}
	} else {
		movementSourceQuery = `where movement_source in ('background', 'foreground')`
	}

	var query string
	var isWeight = false
	switch queryName {
	case "Number of Visits":
		if len(dmaList) > 0 {

			query = `SELECT local_date as date, brand, "Number of Visits" as field, 
			` + subfield + ` as subfield, dma, sum(visit_count) as visit_count FROM ` + dataTable + `
			` + movementSourceQuery + `
			and brand in (` + listOfStringsToQuotedCommaList(entities) + `) ` + dateRestriction + ` ` + dmaRestriction + `
			group by local_date, brand, movement_source_key, dma`

			query = `SELECT a.date, a.brand, a.field, dma as subfield, ` + multiplier + ` * sum(a.visit_count / b.factor) as normalized_visit_count FROM ( ` +
				query +
				`) a JOIN altdatahub.placeiq_daily.factors_new b 
				on a.date = b.local_date
				` + secondaryTypeJoin + `
				where b.primary_type = '` + primaryType + `'
				GROUP BY date, brand, field, dma
				ORDER BY date, brand, field, dma 
				`

			isBigQuery = true
		} else {
			query = `SELECT date_format(local_date, '%Y-%m-%d') as date, brand, "Number of Visits" as field, 
			` + subfield + ` as subfield, sum(visit_count) as visit_count FROM ` + dataTable + `
			` + movementSourceQuery + `
			and brand in (` + listOfStringsToQuotedCommaList(entities) + `) ` + dateRestriction + `
			group by local_date, brand, movement_source_key`

			query = `SELECT a.date, a.brand, a.field, '' as subfield, ` + multiplier + ` * sum(a.visit_count / b.factor) as normalized_visit_count FROM ( ` +
				query +
				`) a JOIN location.factors_new b 
				on a.date = b.local_date
				` + secondaryTypeJoin + `
				where b.primary_type = '` + primaryType + `'
				GROUP BY date, brand, field
				ORDER BY date, brand, field 
				`
		}

	case "Traffic Contribution":
		dateRestriction = ` and local_date = (select max(local_date) from ` + dataTable + `) `

		entityList := listOfStringsToQuotedCommaList(entities)

		query = `SELECT a.local_date, a.subfield, '% of Traffic', a.brand, a.value/b.brand_total as pct_of_total
FROM
(
SELECT date_format(date, '%Y-%m-%d') as local_date, brand, subfield, value
			FROM location.traffic_contribution WHERE brand in (` + entityList + `)
) a
JOIN
(
SELECT date_format(date, '%Y-%m-%d') as local_date, brand, sum(value) as brand_total
			FROM location.traffic_contribution WHERE brand in (` + entityList + `)
            GROUP BY date, brand
) b
ON a.brand = b.brand AND a.local_date = b.local_date
JOIN
(
SELECT date_format(date, '%Y-%m-%d') as local_date, subfield, sum(value) as dma_total
			FROM location.traffic_contribution WHERE brand in (` + entityList + `)
            GROUP BY date, subfield
            ORDER BY dma_total desc
            LIMIT 15
) c
ON a.local_date = c.local_date AND a.subfield = c.subfield
ORDER BY dma_total desc`

		// query1 := `SELECT date_format(local_date, '%Y-%m-%d') as date, brand, "Number of Visits" as field, dma as subfield, sum(visit_count) as visit_count FROM ` + dataTable + `
		// ` + movementSourceQuery + `
		// and brand in (` + entityList + `) ` + dateRestriction + `
		// group by local_date, brand, dma`
		//
		// query2 := `SELECT date_format(local_date, '%Y-%m-%d') as date, brand, "Number of Visits" as field, '' as subfield, sum(visit_count) as visit_count FROM ` + dataTable + `
		// ` + movementSourceQuery + `
		// and brand in (` + entityList + `) ` + dateRestriction + `
		// group by local_date, brand`
		//
		// query = `SELECT a.date, a.subfield as brand, '% of Traffic' as field, '' as subfield, a.visit_count / b.visit_count as value
		// 	FROM (` +
		// 	query1 +
		// 	`) a LEFT JOIN
		// 	(` +
		// 	query2 +
		// 	`) b ON a.brand = b.brand `

	case "SSS Estimate":
		query = `SELECT date_format(date, '%Y-%m-%d') as date, brand, 'SSS Estimate' as field, '' as subfield, sss FROM location.sss
		where brand in (` + listOfStringsToQuotedCommaList(entities) + `) ` + dateRestriction
	case "Quarter Dates":
		query = `SELECT date_format(date, '%Y-%m-%d') as date, brand, 'weight' as field, '' as subfield, 1 as value
			FROM location.quarter_dates
			where brand in (` + listOfStringsToQuotedCommaList(entities) + `) `
		isWeight = true
	}

	log.Infof(ctx, "running query = %s", query)

	if appengine.IsDevAppServer() {
		time.Sleep(time.Second * 1)
		var m MultiEntityData
		log.Infof(ctx, "CANNOT DO A SQL CONNECT ON THE DEV SERVER")
		switch queryName {
		case "Number of Visits":
			json.Unmarshal([]byte(bogusData), &m)
		case "Traffic By DMA":
			json.Unmarshal([]byte(bogusData), &m)
		case "Traffic Contribution":
			json.Unmarshal([]byte(bogusData), &m)
		case "Quarter Dates":
			json.Unmarshal([]byte(bogusData2), &m)
		case "SSS Estimate":
			json.Unmarshal([]byte(bogusData3), &m)
		default:
			json.Unmarshal([]byte(bogusData), &m)
		}
		return m
	}

	var temp MultiEntityData

	if isBigQuery {
		temp = GenericBigQuery(ctx, query, metaMap, " in ", isWeight)
	} else {
		temp = GenericSQLQuery(ctx, query, metaMap, " in ", isWeight)
	}
	log.Infof(ctx, "time taken was %v\nentities = %s\nqueryName = %s\nparameters = %s\nstartDate = %s\nendDate = %s", time.Since(timer), entities, queryName, parameters, startDate, endDate)

	return temp
}

// func GetVisitCounts(ctx context.Context) MultiEntityData {
// 	return GenericQuery(ctx, `select date, brand, "Number of Visits" as field, sum(num_visit)
// from wow_change
// group by date, brand`,
// 		map[string]SeriesMeta{
// 			"Number of Visits": SeriesMeta{
// 				VendorCode:    "Number of Visits",
// 				Label:         "Number of Visits",
// 				Units:         "#",
// 				Source:        "Narrative",
// 				Upsample:      ResampleZero,
// 				Downsample:    ResampleArithmetic,
// 				IsTransformed: false,
// 			},
// 		}, "")
//
// }
